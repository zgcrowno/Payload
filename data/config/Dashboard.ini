;DASHBOARD

[O-Dashboard@O-ScrollMod]
Group = dashboard
Graphic = G-Dashboard
Position = @Commands.CalculatePosition
ChildList = O-Moon # O-MedlarTree
;User-Defined
Pos = @.StartingPosition
Depth = O-Dashboard
AnimStartTimeLeafBunch = 1
AnimEndTimeLeafBunch = 3
AnimStartTimeMoon = 1
AnimEndTimeMoon = 3
AnimStartTimeScroll = 5
AnimEndTimeScroll = 10
MinLeafBunchScale = 0.00000001
MaxLeafBunchScale = 0.4
StartingPosition = (0, -540)
EndingPosition = (0, -1485)
LeafBunchCoordinates = (-545, 659) #
					   (-499, 561) #
					   (-448, 662) #
					   (-264, 641) #
					   (-238, 665) #
					   (-493, 443) #
					   (-391, 426) #
					   (-344, 453) #
					   (-294, 599) #
					   (-236, 546) #
					   (-210, 498) #
					   (-124, 499) #
					   (-70, 560) #
					   (-82, 529) #
					   (-81, 485) #
					   (-120, 373) #
					   (-43, 409) #
					   (22, 428) #
					   (128, 418) #
					   (36, 572) #
					   (278, 329) #
					   (280, 403) #
					   (120, 713) #
					   (119, 601) #
					   (273, 561) #
					   (319, 432) #
					   (469, 438) #
					   (288, 832) #
					   (312, 715) #
					   (479, 807) #
					   (465, 767) #
					   (543, 733)

[G-Dashboard]
Texture = DashboardBackground.png
Pivot = top

;MOON

[O-Moon@O-ScrollMod]
Group = dashboard
Graphic = G-Moon
Position = @Commands.CalculatePosition
Scale = (0.4, 0.4)
UseParentSpace = position
ShaderList = SH-Moon
;User-Defined
Pos = (0.25, 0.07)
Depth = O-Moon
MutableCircleX = @.MutableCircleXStart
MutableCircleXStart = 0.75
Waning = false

[G-Moon]
Texture = DashboardMoon.png
Pivot = center

[SH-Moon]
ParamList = texture #
			MutableCircleX #
			Waning
MutableCircleX = @O-Moon.MutableCircleXStart
Waning = 0
UseCustomParam = true
Code = "

void main()
{
	vec2 uv = gl_TexCoord[0].xy;
	vec4 col = texture2D(texture, uv);
	
	// Only modify the texture's color where it's not completely transparent.
	if (col.w != 0.0)
	{
		// The equation for a circle is (x - h)^2 + (y - k)^2 = r^2, where (h, k) is the circle's center and r is the circle's radius.
		// Given 3 points (a, b), (c, d) and (e, f), we'll solve for h, k and r in terms of a, b, c, d, e and f.
		// Our 3 points are (0.5, 0.0), (MutableCircleX, 0.5) and (0.5, 1.0).
		// See http://2000clicks.com/MathHelp/GeometryConicSectionCircleEquationGivenThreePoints.aspx for an explanation of the method used here.
		float a = 0.5;
		float b = 0.0;
		float c = MutableCircleX;
		float d = 0.5;
		float e = 0.5;
		float f = 1.0;
		float k = 0.5*((pow(a,2.0)+pow(b,2.0))*(e-c)+(pow(c,2.0)+pow(d,2.0))*(a-e)+(pow(e,2.0)+pow(f,2.0))*(c-a))/(b*(e-c)+d*(a-e)+f*(c-a));
		float h = 0.5*((pow(a,2.0)+pow(b,2.0))*(f-d)+(pow(c,2.0)+pow(d,2.0))*(b-f)+(pow(e,2.0)+pow(f,2.0))*(d-b))/(a*(f-d)+c*(b-f)+e*(d-b));
		float rSquared = pow(a-h,2.0)+pow(b-k,2.0);
		float xThreshold = sqrt(rSquared+2*uv.x*h-pow(h,2.0)-pow(uv.y,2.0)+2*uv.y*k-pow(k,2.0));
		
		bool waning = Waning == 1;
		bool uvXIsInCircle = uv.x <= xThreshold;
		bool mutableCircleXIsRightOfCenter = MutableCircleX > 0.5;
		if (uvXIsInCircle && !waning && mutableCircleXIsRightOfCenter)
		{
			col = vec4(0.0, 0.0, 0.0, 0.0);
		}
		else if (uvXIsInCircle && waning && !mutableCircleXIsRightOfCenter)
		{
			col = vec4(0.0, 0.0, 0.0, 0.0);
		}
		else if (!uvXIsInCircle && !waning && !mutableCircleXIsRightOfCenter)
		{
			col = vec4(0.0, 0.0, 0.0, 0.0);
		}
		else if (!uvXIsInCircle && waning && mutableCircleXIsRightOfCenter)
		{
			col = vec4(0.0, 0.0, 0.0, 0.0);
		}
	}
	
	gl_FragColor = col;
}"

;MEDLAR TREE

[O-MedlarTree@O-ScrollMod]
Group = dashboard
Graphic = G-MedlarTree
Position = @Commands.CalculatePosition
UseParentSpace = position
;User-Defined
Pos = (0, 0.4895)
Depth = O-MedlarTree

[G-MedlarTree]
Texture = DashboardTree.png
Pivot = bottom

;LEAF BUNCH

[O-LeafBunch@O-ScrollMod]
Group = dashboard
Graphic = G-LeafBunch
Position = @Commands.CalculatePosition
Scale = (0.00000001, 0.00000001)
ShaderList = SH-LeafBunch
;User-Defined
Pos = (0, 0)
Depth = O-LeafBunch

[G-LeafBunch]
Texture = DashboardLeafBunch.png
Pivot = center

[SH-LeafBunch]
ParamList = texture #
			fTime
fTime = time
UseCustomParam = true
Code = "

void main()
{
	float amplitudeModifier = 0.0125;
	float frequencyModifier = 5;
	vec2 uv = gl_TexCoord[0].xy;
	uv.y = uv.y + amplitudeModifier * sin(fTime + frequencyModifier * uv.x);
	gl_FragColor = texture2D(texture, uv);
}"

;MEDLAR

[O-Medlar@O-ScrollMod]
Group = dashboard
Graphic = G-Medlar
Position = @Commands.CalculatePosition
Scale = (0.07, 0.07)
;User-Defined
Pos = (-540, 750)
Depth = O-Medlar

[G-Medlar]
Texture = DashboardMedlar.png
Pivot = center