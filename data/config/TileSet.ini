;TILE SET

[O-TileSet]
Graphic = G-TileSet
Position = (0.2142857143, 0)
Scale = (0.5238095238, 0.9166666667)
ParentCamera = MainCamera
UseParentSpace = both
ShaderList = SH-TileSet
ChildList = O-PlayerPayload # O-Goal
;User-Defined
Square = 10 ; The number of rows and columns (in Cartesian space) the TileSet has. This value must always be even.
State = @E-TileSetState.Cartesian2D
TimeToShift = 0.5 ; The amount of time, in seconds, it will take for a coordinate or dimensional shift to complete.
TimeToReconfigure = 0.5 ; The amount of time, in seconds, it will take for a memory reconfiguration to complete.
PayloadOrigin = (0, 0) ; The row/column coordinates of the tile on which the PlayerPayload will be spawned.
GoalOrigin = (0, 2) ; The row/column coordinates of the tile on which the Goal will be spawned.
; UnreachableOrigins = (2, 2) # (3, 3)
; ProtocolOrigins = (1, 1)
; BypassOrigins = (0, 1)
; ProxyOrigins = (3, 1) # (3, 2) ; This list must always contain an even number of elements since proxies come in pairs.
; RecursiveOrigins = (1, 0)
; VirusOrigins = (2, 1)
FirewallOrigins = (3, 0)

[G-TileSet]
Texture = % > @, > Get < StringPNG, > Get O-TileSet Square, > @, > Get < StringTileSet, Return "<<<"
Pivot = center
;User-Defined
StringPNG = .png
StringTileSet = TileSet

[SH-TileSet]
ParamList = texture #
			Square #
			State #
			PriorState #
			ShiftStatus #
			TimeToShift #
			TimeSpentShifting #
			PayloadPosition #
			PriorPayloadPosition #
			; TileSetStates for readability
			StateCartesian1D #
			StateCartesian2D #
			StatePolar1D #
			StatePolar2D #
			; TileSetShiftStatuses for readability
			ShiftStatusNone #
			ShiftStatusD1 #
			ShiftStatusD2 #
			ShiftStatusCartesian #
			ShiftStatusPolar #
			ShiftStatusD1Tiles
Square = 0
State = @E-TileSetState.Cartesian2D
PriorState = @E-TileSetState.Cartesian2D
ShiftStatus = @E-TileSetShiftStatus.None
TimeToShift = @O-TileSet.TimeToShift
TimeSpentShifting = @.TimeToShift
PayloadPosition = (0.0, 0.0)
PriorPayloadPosition = (0.0, 0.0)
; TileSetStates for readability
StateCartesian1D = @E-TileSetState.Cartesian1D
StateCartesian2D = @E-TileSetState.Cartesian2D
StatePolar1D = @E-TileSetState.Polar1D
StatePolar2D = @E-TileSetState.Polar2D
; TileSetShiftStatuses for readability
ShiftStatusNone = @E-TileSetShiftStatus.None
ShiftStatusD1 = @E-TileSetShiftStatus.D1
ShiftStatusD2 = @E-TileSetShiftStatus.D2
ShiftStatusCartesian = @E-TileSetShiftStatus.Cartesian
ShiftStatusPolar = @E-TileSetShiftStatus.Polar
ShiftStatusD1Tiles = @E-TileSetShiftStatus.D1Tiles
UseCustomParam = true
Code = "

#define PI 3.1415926535897932384626433832795
#define PI2 (2.0 * PI)
#define NATIVE_TEXTURE_SIZE 1024.0
#define NATIVE_BORDER_THICKNESS 5.0

vec2 square2circle(vec2 xy, float anim)
{
    // [...* 2.0 - 1.0] so the space will be from -1 to 1 instead of from 0 to 1.
	xy = xy * 2.0 - 1.0;
    float u;
    float v;
    float x2 = xy.x * xy.x;
    float y2 = xy.y * xy.y;
    if (x2 >= y2)
    {
		u = mix(sign(xy.x) * (x2 / sqrt(x2 + y2)), xy.x, anim);
		v = mix(sign(xy.x) * ((xy.x * xy.y) / sqrt(x2 + y2)), xy.y, anim);
    }
    else
    {
		u = mix(sign(xy.y) * ((xy.x * xy.y) / sqrt(x2 + y2)), xy.x, anim);
		v = mix(sign(xy.y) * (y2 / sqrt(x2 + y2)), xy.y, anim);
    }
    // [...* 0.5 + 0.5] to get us back into texture space (undoing [...* 2.0 - 1.0]).
    return vec2(u, v) * 0.5 + 0.5;
}

vec2 circle2square(vec2 xy, float anim)
{
	// [...* 2.0 - 1.0] so the space will be from -1 to 1 instead of from 0 to 1.
	xy = xy * 2.0 - 1.0;
    float u;
    float v;
    float x2 = xy.x * xy.x;
    float y2 = xy.y * xy.y;
    if (x2 >= y2)
    {
		u = mix(sign(xy.x) * sqrt(x2 + y2), xy.x, anim);
		v = mix(sign(xy.x) * (xy.y / xy.x) * sqrt(x2 + y2), xy.y, anim);
    }
    else
    {
		u = mix(sign(xy.y) * (xy.x / xy.y) * sqrt(x2 + y2), xy.x, anim);
		v = mix(sign(xy.y) * sqrt(x2 + y2), xy.y, anim);
    }
	// [...* 0.5 + 0.5] to get us back into texture space (undoing [...* 2.0 - 1.0]).
    return vec2(u, v) * 0.5 + 0.5;
}

// BEGIN ALERT: This function for performing a polar transformation on a passed texture 
// has both self-same and inverse counterparts in code. Ensure that any changes I make here are reflected
// code side.
// END ALERT
vec2 CartesianToPolar(vec2 uv, float anim)
{
	// Subtracting uv from (1., 1.) so we can place the polar axis on the bottom of the texture.
	uv = vec2(1.0, 1.0) - uv;
	
	// swap axis to move the line from the right side of the texture to the bottom.
    uv.xy = uv.yx;
	
	// Move uv to center of screen--delta's space is now [-1, 1] instead of [0, 1].
	vec2 delta = uv * 2.0 - 1.0;
	float radius = length(delta);
	float angle = (atan(delta.y, delta.x) + PI) / PI2;
	
	vec2 polarUV = vec2(radius, angle);
	
	float mixWeight = smoothstep(0.0, 1.0, anim);
	
	return mix(uv, polarUV, mixWeight);
}

void main()
{
	// The uv coordinates of the current pixel.
	vec2 uv = gl_TexCoord[0].xy;
	// lerp weight to mix between dimensions/coordinate systems.
	float anim;
	// The number of borders (either vertically or horizontally).
	int numBorders = int(Square) + 1;
	// The normalized size (thickness) of a border in the TileSet.
	float borderSize = NATIVE_BORDER_THICKNESS / NATIVE_TEXTURE_SIZE;
	// The normalized size (both width and height) of a tile in the TileSet.
	float tileSize = ((NATIVE_TEXTURE_SIZE - (numBorders * NATIVE_BORDER_THICKNESS)) / Square) / NATIVE_TEXTURE_SIZE;
	// Is the TileSet Cartesian?
	bool cartesian = State == StateCartesian1D || State == StateCartesian2D;
	// Is the TileSet 2D?
	bool d2 = State == StateCartesian2D || State == StatePolar2D;
	
	// Set anim and uv.
	if (cartesian)
	{
		if (d2 && PriorState == StatePolar2D)
		{
			anim = clamp(TimeSpentShifting / TimeToShift, 0.0, 1.0);
			uv = circle2square(uv, anim);
		}
		else if (PriorState == StatePolar1D)
		{
			anim = ShiftStatus == ShiftStatusD1Tiles ? 0.0 : clamp(1.0 - TimeSpentShifting / TimeToShift, 0.0, 1.0);
			uv = CartesianToPolar(uv , anim);
		}
	}
	else
	{
		if (d2)
		{
			anim = clamp(1.0 - TimeSpentShifting / TimeToShift, 0.0, 1.0);
			uv = PriorState == StateCartesian2D ? circle2square(uv, anim) : circle2square(CartesianToPolar(uv , anim), anim);
		}
		else
		{
			anim = ShiftStatus == ShiftStatusD1Tiles ? 1.0 : clamp(TimeSpentShifting / TimeToShift, 0.0, 1.0);
			uv = PriorState == StateCartesian1D ? CartesianToPolar(uv , anim) : circle2square(CartesianToPolar(uv , anim), anim);
		}
	}
	
	// The color of the texture at uv.
	vec4 col = texture2D(texture, uv);
	
	// Ensure that col is either pure white or pure black
	float whiteProximity = length(col - vec4(1.0, 1.0, 1.0, 1.0));
	float blackProximity = length(col - vec4(0.0, 0.0, 0.0, 1.0));
	col = whiteProximity > blackProximity ? vec4(0.0, 0.0, 0.0, 1.0) : vec4(1.0, 1.0, 1.0, 1.0);
	
	// Change color of background tiles.
	vec4 pureWhite = vec4(1.0, 1.0, 1.0, 1.0);
	vec4 pureBlack = vec4(0.0, 0.0, 0.0, 1.0);
	bool colIsPureBlack = col.x == 0 && col.y == 0 && col.z == 0;
	if (State == StateCartesian1D)
	{
		if (PriorState == StatePolar1D)
		{
			vec2 payloadPolarPos = ShiftStatus == ShiftStatusNone ? CartesianToPolar(PriorPayloadPosition.xy, anim) : CartesianToPolar(PayloadPosition.xy, anim);
			float tileRadius = 0.5 / Square;
			float payloadTileInnerDist = length(payloadPolarPos.x - tileRadius);
			float payloadTileOuterDist = length(payloadPolarPos.x + tileRadius);
			bool uvInPayloadTile = uv.x <= payloadTileOuterDist && uv.x >= payloadTileInnerDist;
			bool uvInOuterTileSetEdge = uv.x <= borderSize || uv.x >= 1.0 - borderSize || uv.y <= borderSize || uv.y >= 1.0 - borderSize;
			if (!uvInPayloadTile && !uvInOuterTileSetEdge)
			{
				col = colIsPureBlack ? pureWhite : pureBlack;
			}
		}
		else
		{
			float uvY = uv.y;
			float lerpWeight;
			if (ShiftStatus == ShiftStatusD1Tiles)
			{
				lerpWeight = clamp(TimeSpentShifting / TimeToShift, 0.0, 1.0);
			}
			else if (ShiftStatus == ShiftStatusNone)
			{
				lerpWeight = 1.0;
			}
			else
			{
				lerpWeight = 0.0;
			}
			float tileSetBottomY = 0.0;
			float tileSetTopY = 1.0;
			float payloadY = ShiftStatus == ShiftStatusNone ? PriorPayloadPosition.y : PayloadPosition.y;
			float payloadTileTopY = payloadY + (tileSize / 2.0) + borderSize;
			float payloadTileBottomY = payloadY - (tileSize / 2.0) - borderSize;
			float distanceFromPayloadTileTopYToTileSetTopY = abs(payloadTileTopY - tileSetTopY);
			float distanceFromPayloadTileBottomYToTileSetBottomY = abs(payloadTileBottomY - tileSetBottomY);
			bool topDistGreater = distanceFromPayloadTileTopYToTileSetTopY > distanceFromPayloadTileBottomYToTileSetBottomY;
			float tileSetForegroundBottomYLerpWeight = topDistGreater ?
													   lerpWeight * (distanceFromPayloadTileTopYToTileSetTopY / distanceFromPayloadTileBottomYToTileSetBottomY) :
													   lerpWeight;
			float tileSetForegroundTopYLerpWeight = topDistGreater ? 
													lerpWeight : 
													lerpWeight * (distanceFromPayloadTileBottomYToTileSetBottomY / distanceFromPayloadTileTopYToTileSetTopY);
			float tileSetForegroundBottomY = mix(tileSetBottomY, payloadTileBottomY, tileSetForegroundBottomYLerpWeight);
			float tileSetForegroundTopY = mix(tileSetTopY, payloadTileTopY, tileSetForegroundTopYLerpWeight);
			bool uvInPayloadTile = uvY <= payloadTileTopY && uvY >= payloadTileBottomY;
			bool uvInForegroundDistanceBottom = uvY >= tileSetForegroundBottomY && uvY <= payloadTileBottomY;
			bool uvInForegroundDistanceTop = uvY <= tileSetForegroundTopY && uvY >= payloadTileTopY;
			bool uvInForeground = uvInPayloadTile || uvInForegroundDistanceTop || uvInForegroundDistanceBottom;
			if (!uvInForeground)
			{
				col = colIsPureBlack ? pureWhite : pureBlack;
			}
		}
	}
	else if (State == StateCartesian2D)
	{
		float uvY = uv.y;
		float lerpWeight = PriorState == StateCartesian1D ? clamp(TimeSpentShifting / TimeToShift, 0.0, 1.0) : 1.0;
		float tileSetBottomY = 0.0;
		float tileSetTopY = 1.0;
		float payloadY = PayloadPosition.y;
		float payloadTileTopY = payloadY + (tileSize / 2.0) + borderSize;
		float payloadTileBottomY = payloadY - (tileSize / 2.0) - borderSize;
		float tileSetForegroundBottomY = mix(payloadTileBottomY, tileSetBottomY, lerpWeight);
		float tileSetForegroundTopY = mix(payloadTileTopY, tileSetTopY, lerpWeight);
		bool uvInPayloadTile = uvY <= payloadTileTopY && uvY >= payloadTileBottomY;
		bool uvInForegroundDistanceBottom = uvY >= tileSetForegroundBottomY && uvY <= payloadTileBottomY;
		bool uvInForegroundDistanceTop = uvY <= tileSetForegroundTopY && uvY >= payloadTileTopY;
		bool uvInOuterTileSetEdge = uv.x <= borderSize || uv.x >= 1.0 - borderSize || uv.y <= borderSize || uv.y >= 1.0 - borderSize;
		bool uvInForeground = uvInPayloadTile || uvInForegroundDistanceTop || uvInForegroundDistanceBottom;
		if (!uvInForeground && (PriorState == StateCartesian1D || !uvInOuterTileSetEdge))
		{
			col = colIsPureBlack ? pureWhite : pureBlack;
		}
	}
	else if (State == StatePolar1D)
	{
		vec2 payloadPolarPos = ShiftStatus == ShiftStatusNone ? CartesianToPolar(PriorPayloadPosition.xy, anim) : CartesianToPolar(PayloadPosition.xy, anim);
		float lerpWeight;
		if (ShiftStatus == ShiftStatusD1Tiles)
		{
			lerpWeight = clamp(TimeSpentShifting / TimeToShift, 0.0, 1.0);
		}
		else if (ShiftStatus == ShiftStatusNone || PriorState == StateCartesian1D)
		{
			lerpWeight = 1.0;
		}
		else
		{
			lerpWeight = 0.0;
		}
		float tileRadius = 0.5 / Square;
		float payloadTileInnerDist = length(payloadPolarPos.x - tileRadius);
		float payloadTileOuterDist = length(payloadPolarPos.x + tileRadius);
		float distanceFromPayloadTileInnerDistToTileSetCenter = length(payloadPolarPos.x - tileRadius);
		float distanceFromPayloadTileOuterDistToTileSetRadius = 1.0 - length(payloadPolarPos.x + tileRadius);
		bool outerDistGreater = distanceFromPayloadTileOuterDistToTileSetRadius > distanceFromPayloadTileInnerDistToTileSetCenter;
		float tileSetForegroundInnerDistLerpWeight = outerDistGreater ?
												   lerpWeight * (distanceFromPayloadTileOuterDistToTileSetRadius / distanceFromPayloadTileInnerDistToTileSetCenter) :
												   lerpWeight;
		float tileSetForegroundOuterDistLerpWeight = outerDistGreater ? 
												lerpWeight : 
												lerpWeight * (distanceFromPayloadTileInnerDistToTileSetCenter / distanceFromPayloadTileOuterDistToTileSetRadius);
		float tileSetForegroundInnerDist = mix(0.0, payloadTileInnerDist, tileSetForegroundInnerDistLerpWeight);
		float tileSetForegroundOuterDist = mix(1.0, payloadTileOuterDist, tileSetForegroundOuterDistLerpWeight);
		bool uvInPayloadTile = uv.x <= payloadTileOuterDist && uv.x >= payloadTileInnerDist;
		bool uvInForegroundDistanceInner = uv.x >= tileSetForegroundInnerDist && uv.x <= payloadTileInnerDist;
		bool uvInForegroundDistanceOuter = uv.x <= tileSetForegroundOuterDist && uv.x >= payloadTileOuterDist;
		bool uvInOuterTileSetEdgeX = uv.x <= borderSize || uv.x >= 1.0 - borderSize;
		bool uvInForeground = uvInPayloadTile || uvInForegroundDistanceInner || uvInForegroundDistanceOuter;
		if (!uvInForeground && !uvInOuterTileSetEdgeX)
		{
			col = colIsPureBlack ? pureWhite : pureBlack;
		}
	}
	else //d2 && !cartesian
	{
		if (PriorState == StatePolar1D)
		{
			vec2 payloadPolarPos = ShiftStatus == ShiftStatusNone ? CartesianToPolar(PriorPayloadPosition.xy, anim) : CartesianToPolar(PayloadPosition.xy, anim);
			float lerpWeight = clamp(TimeSpentShifting / TimeToShift, 0.0, 1.0);
			float tileRadius = 0.5 / Square;
			float payloadTileInnerDist = length(payloadPolarPos.x - tileRadius);
			float payloadTileOuterDist = length(payloadPolarPos.x + tileRadius);
			float tileSetForegroundInnerDist = mix(payloadTileInnerDist, 0.0, lerpWeight);
			float tileSetForegroundOuterDist = mix(payloadTileOuterDist, 1.0, lerpWeight);
			bool uvInPayloadTile = uv.x <= payloadTileOuterDist && uv.x >= payloadTileInnerDist;
			bool uvInForegroundDistanceInner = uv.x >= tileSetForegroundInnerDist && uv.x <= payloadTileInnerDist;
			bool uvInForegroundDistanceOuter = uv.x <= tileSetForegroundOuterDist && uv.x >= payloadTileOuterDist;
			bool uvInOuterTileSetEdge = uv.x <= borderSize || uv.x >= 1.0 - borderSize || uv.y <= borderSize || uv.y >= 1.0 - borderSize;
			bool uvInForeground = uvInPayloadTile || uvInForegroundDistanceInner || uvInForegroundDistanceOuter;
			if (!uvInForeground && !uvInOuterTileSetEdge)
			{
				col = colIsPureBlack ? pureWhite : pureBlack;
			}
		}
		else 
		{
			float uvY = PriorState == StatePolar1D ? 1.0 - uv.x : uv.y;
			float lerpWeight = PriorState == StatePolar1D ? clamp(TimeSpentShifting / TimeToShift, 0.0, 1.0) : 1.0;
			float tileSetBottomY = 0.0;
			float tileSetTopY = 1.0;
			float payloadY = PayloadPosition.y;
			float payloadTileTopY = payloadY + (tileSize / 2.0) + borderSize;
			float payloadTileBottomY = payloadY - (tileSize / 2.0) - borderSize;
			float tileSetForegroundBottomY = mix(payloadTileBottomY, tileSetBottomY, lerpWeight);
			float tileSetForegroundTopY = mix(payloadTileTopY, tileSetTopY, lerpWeight);
			bool uvInPayloadTile = uvY <= payloadTileTopY && uvY >= payloadTileBottomY;
			bool uvInForegroundDistanceBottom = uvY >= tileSetForegroundBottomY && uvY <= payloadTileBottomY;
			bool uvInForegroundDistanceTop = uvY <= tileSetForegroundTopY && uvY >= payloadTileTopY;
			bool uvInOuterTileSetEdge = uv.x <= borderSize || uv.x >= 1.0 - borderSize || uv.y <= borderSize || uv.y >= 1.0 - borderSize;
			bool uvInForeground = uvInPayloadTile || uvInForegroundDistanceTop || uvInForegroundDistanceBottom;
			if (!uvInForeground && !uvInOuterTileSetEdge)
			{
				col = colIsPureBlack ? pureWhite : pureBlack;
			}
		}
	}
	
	gl_FragColor = col;
}"

[E-TileSetState]
Cartesian1D = 0
Cartesian2D = 1
Polar1D = 2
Polar2D = 3

[E-TileSetShiftStatus]
None = 0
D1 = 1
D2 = 2
Cartesian = 3
Polar = 4
D1Tiles = 5

[E-Direction]
Right = 0
Down = 1
Left = 2
Up = 3